{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-gatsby-blog-2-index-mdx-bcfec4e3160214e0fc19.js","mappings":"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","sources":["webpack://minimal-blog/./content/posts/gatsby_blog-2/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    ul: \"ul\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"지난 포스팅에서는 GatsbyJS의 gatsby-starter-minimal-blog 템플릿을 이용하여 블로그를 만들어보았다. 이번 포스팅에서는 Github Pages를 이용하여 블로그를 배포해보자.\"), \"\\n\", React.createElement(_components.h2, null, \"깃허브 페이지 설정\"), \"\\n\", React.createElement(_components.p, null, \"깃허브 페이지를 이용하기 위해선 깃허브 계정이 필요하며 배포할 경우 경로는 \", React.createElement(_components.code, null, \"{계정명}.github.io/{레포명}\"), \"이나 \", React.createElement(_components.code, null, \"{계정명}.github.io/docs\"), \"가 된다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"블로그로 사용할 레포지토리를 생성하고, 레포지토리 이름 밑의 'Settings'를 클릭한다.\"), \"\\n\", React.createElement(_components.li, null, \"왼쪽 Pages 섹션에서 'Source'를 클릭하고, 'Deploy from a branch'를 선택한다.\"), \"\\n\", React.createElement(_components.li, null, \"아래 'Branch' 드롭다운에서 'main'을 선택하여 배포하거나, 배포용 브랜치를 따로 만들어서 배포할 수 있다. 이 블로그의 경우 'deploy' 브랜치를 생성하여 배포하였다.\"), \"\\n\", React.createElement(_components.li, null, \"배포대상 폴더는 'root'를 선택하고, 'Save'를 클릭한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, React.createElement(_components.code, null, \"gh-pages\"), \" 설치\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"gh-pages\"), \"는 GitHub Pages 배포를 위한 패키지이다.\\n이전에 만든 블로그 프로젝트 폴더로 이동하여 \", React.createElement(_components.code, null, \"gh-pages\"), \"를 설치한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"npm install gh-pages --save-dev\\n\")), \"\\n\", React.createElement(_components.h2, null, \"deploy 스크립트 추가\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"경로 접두사가 있는 경로에 배포하기\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"{계정명}.github.io/{레포명}\"), \"와 같은 경로에 배포된 사이트의 경우, 웹사이트가 \", React.createElement(_components.code, null, \"{계정명}.github.io/{레포명}\"), \"와 같은 폴더 안에 들어가게 되므로 --prefix-paths 플래그가 필요하다.\\ngatsby-config.js에 옵션으로 /reponame 경로 접두사를 추가해야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"Javascript의 경우는 아래와 같이 설정하면 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\",\n    title: \"gatsby-config.js\"\n  }, \"module.exports = {\\n  pathPrefix: \\\"/{레포명}\\\",\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Typescript의 경우는 아래와 같이 설정하면 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\",\n    title: \"gatsby-config.ts\"\n  }, \"const config: GatsbyConfig = {\\n  pathPrefix: `/{레포명}`,\\n  ...\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"배포 스크립트 추가\\n그런 다음 리포지토리의 코드베이스에 있는 package.json에 배포 스크립트를 추가한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\",\n    title: \"package.json\"\n  }, \"{\\n  \\\"scripts\\\": {\\n    \\\"deploy\\\": \\\"gatsby build --prefix-paths && gh-pages -d public\\\"\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"배포용 브랜치가 main이 아닐경우 -b deploy\\\"를 추가하면 배포용 브랜치에 배포할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"배포하기\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"npm run deploy\"), \"를 실행하면 공개 폴더의 모든 콘텐츠가 리포지토리의 gh-pages 브랜치로 이동하고, GitHub Pages에 배포된다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"배포까지 약 5분정도 소요된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"브라우저 캐시로인해 변경사항이 적용되지 않을 수 있으므로, 프라이빗 모드로 접속하거나 캐시를 삭제하고 접속해보자.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/onexenon/Workspace/gatsby-starter-minimal-blog/content/posts/gatsby_blog-2/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","code","ol","li","pre","ul","blockquote","_provideComponents","components","React","className","title","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}